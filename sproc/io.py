# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/40_io.ipynb.

# %% auto 0
__all__ = ['File', 'cast_to_list_if_not_already', 'homogenize_multivalued', 'cast_list_to_floats_or_strs',
           'cast_multivalued_series_to_common_type', 'write', 'read']

# %% ../nbs/40_io.ipynb 3
import pathlib
from typing import Any

import pandas as pd
import numpy as np

import sproc.xml
import sproc.structure

import fastcore.foundation

# %% ../nbs/40_io.ipynb 12
class File:
    
    def __init__(self, stem: str | pathlib.Path):
        
        self.name: pathlib.Path = pathlib.Path(stem)
        
        assert self.name.suffix == '', 'an extension-less file is expected'
        
        self.name = self.name.with_suffix('.pickle')
        
    def __str__(self):
        
        return self.name.as_posix()
    
    def __repr__(self):
        
        return self.__str__()
        
    def exists(self) -> bool:

        return self.name.exists()

# %% ../nbs/40_io.ipynb 25
def cast_to_list_if_not_already(
    x: Any # Input
    ) -> list | np.ndarray: # Output
    "Casts an element to `list` type if not already"

    t = type(x)
    
    if (t == list) or (t == np.ndarray):
        
        return x
        
    else:
        
        return [x]

# %% ../nbs/40_io.ipynb 30
def homogenize_multivalued(
    df: pd.DataFrame # Input
    ) -> pd.DataFrame: # Output
    "Processes every column containing a list such that *every* element is a list"
    
    res = df.copy()
    
    # for every column that is multivalued...
    for col_name in sproc.structure.multivalued_columns(res):
        
        # if the type of an element (index) is list, it's left as it is, otherwise a list is wrapped around it
        # res[col_name] = res[col_name].apply(lambda x: x if type(x) == list else [x])
        res[col_name] = res[col_name].apply(cast_to_list_if_not_already)
        
    return res

# %% ../nbs/40_io.ipynb 35
def cast_list_to_floats_or_strs(l: # Input
    list) -> list: # Output
    "Homogenizes the elements in a list such that they are all either `float` or `str`"
    
    # *scalar* Pandas' `pd.NA` are turned into Numpy's `np.nan`
    #l = [np.NAN if (type(e) != list) and (pd.isna(e)) else e for e in l] DEPRECATED VERSION OF NUMPY NAN (Updated 14/11/2024)-> np.nan
    l = [np.nan if (type(e) != list) and (pd.isna(e)) else e for e in l]

    
    try:
        return [float(e) for e in l]
    
    # `TypeError` most likely means there is (at least) one element that is a list
    except (ValueError, TypeError):
        
        return [str(e) for e in l]

# %% ../nbs/40_io.ipynb 55
def cast_multivalued_series_to_common_type(
    s: pd.Series # Input
    ) -> pd.Series: # Output
    "*Casts* all the lists in the input series to a common type"
    
    types = set(s.apply(lambda x: type(x[0])))
    # print(s.apply(lambda x: type(x[0])))
    
    if len(types) == 1:
        
        return s.copy()
    
    elif types == set([float, str]):
        
        return s.apply(lambda x: [str(e) for e in x])
    
    else:
        
        raise Exception("don't know how to handle these types")

# %% ../nbs/40_io.ipynb 62
@fastcore.foundation.patch
def write(self: File, df: pd.DataFrame):
    
    df.to_pickle(self.name)

# %% ../nbs/40_io.ipynb 68
@fastcore.foundation.patch
def read(self: File) -> pd.DataFrame:
    
    return pd.read_pickle(self.name)
