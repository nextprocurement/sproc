# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_bundle.ipynb.

# %% auto 0
__all__ = ['read_zip', 'read_deleted_zip']

# %% ../nbs/20_bundle.ipynb 2
import pathlib
import zipfile

import pandas as pd

import sproc.structure
import sproc.xml

# %% ../nbs/20_bundle.ipynb 11
def read_zip(
    input_file: str | pathlib.Path, # Input file
    concatenate: bool = False, # If `True` all the files are concatenated in a single `pd.DataFrame`
    return_filenames: bool = False # If `True` the names of the files (read) within the zip are returned too
) -> list | pd.DataFrame | tuple[list, list] | tuple[pd.DataFrame, list]: # XML data
    "Reads and parses an XML file into a `pd.DataFrame`"

    # in case a `str` was passed
    input_file = pathlib.Path(input_file)
    
    dfs = []
    
    # zip file is opened
    with zipfile.ZipFile(input_file) as zip_file:
        
        # for the sake of convenience
        filenames = zip_file.namelist()
        
        # every file within it...
        for name in filenames:
            
            # ...is opened...
            with zip_file.open(name) as f:
                
                # ...and processed
                dfs.append(sproc.xml.to_curated_df(f))
    
    if concatenate:
        
        # dfs = pd.concat(dfs, keys=filenames, names=['file name', 'entry'])

        dfs = pd.concat(dfs, keys=pd.MultiIndex.from_product(([input_file.name], filenames)), names=['zip', 'file name', 'entry'])
    
    if return_filenames:
        
        return dfs, filenames
    
    else:
        
        return dfs

# %% ../nbs/20_bundle.ipynb 19
def read_deleted_zip(
    input_file: str | pathlib.Path # Input file
    ) -> pd.Series: # XML data
    "Reads and parses an XML file into a `pd.DataFrame`"
    
    series = []

    # in case a `str` was passed
    input_file = pathlib.Path(input_file)
    
    # zip file is opened
    with zipfile.ZipFile(input_file) as zip_file:
        
        # for the sake of convenience
        filenames = zip_file.namelist()
        
        # every file within it...
        for name in filenames:
            
            # ...is opened...
            with zip_file.open(name) as f:
                
                # ...and processed
                series.append(sproc.xml.deleted_to_series(f))

    return pd.concat(series, keys=pd.MultiIndex.from_product(([input_file.name], filenames)), names=['zip', 'file name', 'id'])
    # return pd.concat(series, keys=filenames, names=['file name', 'id'])
